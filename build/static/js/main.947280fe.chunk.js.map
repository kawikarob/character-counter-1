{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","textValue","setTextValue","characters","setCharacters","topFive","setTopFive","className","rows","style","width","height","borderColor","borderWidth","outline","overflow","autoFocus","placeholder","value","onChange","e","target","text","string","seen","Set","order","count","i","length","char","undefined","has","add","out","countOfChar","push","character","sortedArray","sort","a","b","top5sorted","map","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAoGeA,MAlGf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,qBAA9B,mBAAOK,EAAP,KAAgBC,EAAhB,KAiDA,OACE,gCACE,qBAAKC,UAAU,aAAf,SACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAU,kCAAb,wBACA,mBAAGA,UAAU,wBAAb,oCAGJ,qBAAKA,UAAU,2BAAf,SACE,0BACEC,KAAM,IACNC,MAAO,CACLC,MAAO,MACPC,OAAQ,MACRC,YAAa,QACbC,YAAa,MACbC,QAAS,OACTC,SAAU,QAEZC,WAAS,EACTC,YAAY,kBACZC,MAAOjB,EACPkB,SAAU,SAACC,GACTlB,EAAakB,EAAEC,OAAOH,OArElB,SAACI,GASb,IARA,IAAMC,EAASD,EAETE,EAAO,IAAIC,IAEbC,EAAQ,GAENC,EAAQ,GAELC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAAK,CACtC,IAAIE,EAAOP,EAAOK,GAElBD,EAAMG,QAAwBC,IAAhBJ,EAAMG,GAAsB,EAAIH,EAAMG,GAAQ,EAEvDN,EAAKQ,IAAIF,KACZJ,GAASI,EACTN,EAAKS,IAAIH,IAKb,IADA,IAAII,EAAM,GACDN,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACrC,IAAIE,EAAOJ,EAAME,GACbO,EAAcR,EAAMG,GACxBI,EAAIE,KAAK,CACPC,UAAWP,EACXH,MAAOQ,IAGX/B,EAAc8B,GAGd,IAAII,EAAc,GAClB,IAAK,IAAIR,KAAQH,EACfW,EAAYF,KAAK,CAACN,EAAMH,EAAMG,KAEhCQ,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MAGpC,IADA,IAAIE,EAAa,GACRd,EAAI,EAAGA,EAAIU,EAAYT,QAEJ,KAD1Ba,GAAcJ,EAAYV,GAAG,IACdC,OAFuBD,KAIxCtB,EAAWoC,GA2BHf,CAAMP,EAAEC,OAAOH,YAIrB,8BACGf,EAAWwC,KAAI,SAACN,GACf,OACE,sBAAK9B,UAAU,gCAAf,UACE,oBAAGA,UAAU,YAAb,UACG8B,EAAUA,UADb,IACyBA,EAAUV,SAEnC,mBAAGpB,UAAU,yBAAb,SACGF,EAAQuC,SAASP,EAAUA,YAAc,sBC9E3CQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.947280fe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const [textValue, setTextValue] = useState(\"\");\n  const [characters, setCharacters] = useState([]);\n  const [topFive, setTopFive] = useState();\n\n  /// Character Count ///\n  const count = (text) => {\n    const string = text;\n\n    const seen = new Set();\n\n    let order = \"\";\n\n    const count = {};\n\n    for (let i = 0; i < string.length; i++) {\n      let char = string[i];\n\n      count[char] = count[char] === undefined ? 1 : count[char] + 1;\n\n      if (!seen.has(char)) {\n        order += char;\n        seen.add(char);\n      }\n    }\n\n    let out = [];\n    for (let i = 0; i < order.length; i++) {\n      let char = order[i];\n      let countOfChar = count[char];\n      out.push({\n        character: char,\n        count: countOfChar,\n      });\n    }\n    setCharacters(out);\n\n    /// Top 5 Characters ///\n    let sortedArray = [];\n    for (let char in count) {\n      sortedArray.push([char, count[char]]);\n    }\n    sortedArray.sort((a, b) => b[1] - a[1]);\n\n    let top5sorted = \"\";\n    for (let i = 0; i < sortedArray.length; i++) {\n      top5sorted += sortedArray[i][0];\n      if (top5sorted.length === 5) break;\n    }\n    setTopFive(top5sorted);\n  };\n\n  return (\n    <div>\n      <div className=\"pt-10 pb-5\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-red-600\">TOP SECRET</p>\n          <p className=\"text-xl font-bold p-2\">Character Counter</p>\n        </div>\n      </div>\n      <div className=\"flex justify-center pb-4\">\n        <textarea\n          rows={\"8\"}\n          style={{\n            width: \"50%\",\n            height: \"30%\",\n            borderColor: \"black\",\n            borderWidth: \"3px\",\n            outline: \"none\",\n            overflow: \"auto\",\n          }}\n          autoFocus\n          placeholder=\"Enter Text Here\"\n          value={textValue}\n          onChange={(e) => {\n            setTextValue(e.target.value);\n            count(e.target.value);\n          }}\n        ></textarea>\n      </div>\n      <div>\n        {characters.map((character) => {\n          return (\n            <div className=\"flex justify-center space-x-2\">\n              <p className=\"font-bold\">\n                {character.character}:{character.count}\n              </p>\n              <p className=\"text-red-500 font-bold\">\n                {topFive.includes(character.character) && \"Top 5\"}\n              </p>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}